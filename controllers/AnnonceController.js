

const User = require("../models/userSchema");
const Annonce = require("../models/Annonceschema"); 


// get delete search update add annonces 
// add annonces by image 

exports.addAnnonce = async (req, res) => {
  try {
    const announcerId = req.params.id; // id ÿßŸÑŸÖÿπŸÑŸÜ ŸÖŸÜ ÿßŸÑÿ±ÿßÿ®ÿ∑
    const data = req.body;

    // ÿßŸÑÿ™ÿ£ŸÉÿØ ÿ£ŸÜ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ŸÖŸàÿ¨ŸàÿØ
    const announcer = await User.findById(announcerId);
    if (!announcer) {
      return res.status(404).json({ message: "Utilisateur non trouv√©" });
    }

    // ÿßŸÑÿ™ÿ£ŸÉÿØ ÿ£ŸÜ ÿßŸÑÿØŸàÿ± ŸáŸà "announcer"
    if (announcer.role !== "annonceur") {
      return res.status(403).json({ message: "Seuls les annonceurs peuvent ajouter des annonces" });
    }

    // ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑÿµŸàÿ±ÿ© ÿ•ÿ∞ÿß ŸÖŸàÿ¨ŸàÿØÿ©
    if (req.file) {
      data.image = `/images/${req.file.filename}`;
    }

    // ÿ±ÿ®ÿ∑ ÿßŸÑÿ•ÿπŸÑÿßŸÜ ÿ®ÿßŸÑŸÖÿπŸÑŸÜ
    data.idannouncer = announcerId;

    // ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑÿ•ÿπŸÑÿßŸÜ
    const newAnnonce = new Annonce(data);
    await newAnnonce.save();

    // (ÿßÿÆÿ™Ÿäÿßÿ±Ÿä) ŸÑŸà ÿ≠ÿ®Ÿäÿ™ ÿ™ÿ±ÿ®ÿ∑ ÿßŸÑÿ•ÿπŸÑÿßŸÜ ÿØÿßÿÆŸÑ ÿßŸÑŸÖÿπŸÑŸÜ
    if (!announcer.annonces) announcer.annonces = [];
    announcer.annonces.push(newAnnonce._id);
    await announcer.save();

    res.status(201).json({
      message: "üì¢ Annonce ajout√©e avec succ√®s",
      annonce: newAnnonce
    });
  } catch (error) {
    console.error("‚ùå Erreur:", error);
    res.status(500).json({ message: "Erreur lors de l'ajout de l'annonce", error });
  }
};

exports.getAnnonceById = async (req, res) => {
  try {
    const annonce = await Annonce.findById(req.params.id)
      .populate('idannouncer', 'nom email');
    if (!annonce) {
      return res.status(404).json({ message: "Annonce non trouv√©e" });
    }
    res.status(200).json(annonce);
  } catch (error) {
    res.status(500).json({ message: "Erreur lors de la r√©cup√©ration de l'annonce", error });
  }
};

// delete annonce by id
exports.deleteAnnonce = async (req, res) => {
  try {
    const annonceId = req.params.id;

    // 1. ÿ•Ÿäÿ¨ÿßÿØ Ÿàÿ≠ÿ∞ŸÅ ÿßŸÑÿ•ÿπŸÑÿßŸÜ ŸÖŸÜ collection annonces
    const deletedAnnonce = await Annonce.findByIdAndDelete(annonceId);
    if (!deletedAnnonce) {
      return res.status(404).json({ message: "Annonce non trouv√©e" });
    }

    // 2. ÿ≠ÿ∞ŸÅ ÿßŸÑÿ•ÿπŸÑÿßŸÜ ŸÖŸÜ array annonces ŸÅŸä ÿßŸÑŸÖÿπŸÑŸÜ
    await User.updateOne(
      { _id: deletedAnnonce.idannouncer }, // ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑÿ≠ŸÇŸÑ ÿßŸÑÿµÿ≠Ÿäÿ≠
      { $pull: { annonces: annonceId } }   // ÿ•ÿ≤ÿßŸÑÿ© ÿßŸÑÿ•ÿπŸÑÿßŸÜ ŸÖŸÜ ÿßŸÑŸÖÿµŸÅŸàŸÅÿ©
    );

    res.status(200).json({ message: "Annonce supprim√©e avec succ√®s" });
  } catch (error) {
    console.error("‚ùå Erreur:", error);
    res.status(500).json({ message: "Erreur du serveur", error: error.message });
  }
};
//update annonce by id 

exports.updateAnnonce = async (req, res) => {
  try {
    const annonceId = req.params.id; // ID de l'annonce
    const data = req.body; // nouvelles donn√©es

    // 1Ô∏è‚É£ ÿßŸÑÿ™ÿ≠ŸÇŸÇ ÿ£ŸÜ ÿßŸÑÿ•ÿπŸÑÿßŸÜ ŸÖŸàÿ¨ŸàÿØ
    const annonce = await Annonce.findById(annonceId);
    if (!annonce) {
      return res.status(404).json({ message: "üö´ Annonce not found" });
    }

    // 2Ô∏è‚É£ ÿßŸÑÿ™ÿ≠ŸÇŸÇ ÿ£ŸÜ ÿßŸÑŸÖÿπŸÑŸêŸÜ ÿßŸÑŸÖÿ±ÿ™ÿ®ÿ∑ ŸÖŸàÿ¨ŸàÿØ
    const announcer = await User.findById(annonce.idannouncer);
    if (!announcer) {
      return res.status(404).json({ message: "üö´ Announcer not found" });
    }

    // 3Ô∏è‚É£ ÿßŸÑÿ™ÿ≠ŸÇŸÇ ÿ£ŸÜ ÿßŸÑÿØŸàÿ± ŸáŸà ŸÖÿπŸÑŸêŸÜ (announcer)
    if (announcer.role !== "annonceur") {
      return res.status(403).json({ message: "üö´ User is not an announcer" });
    }

    // 4Ô∏è‚É£ ÿ•ÿ∞ÿß ÿ™ŸÖ ÿ±ŸÅÿπ ÿµŸàÿ±ÿ© ÿ¨ÿØŸäÿØÿ©
    if (req.file) {
      data.image = `/uploads/annonces/${req.file.filename}`;
    }

    // 5Ô∏è‚É£ ÿ™ÿ≠ÿØŸäÿ´ ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ•ÿπŸÑÿßŸÜ
    const updatedAnnonce = await Annonce.findByIdAndUpdate(annonceId, data, {
      new: true, // ŸÑÿ•ÿ±ÿ¨ÿßÿπ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿ®ÿπÿØ ÿßŸÑÿ™ÿ≠ÿØŸäÿ´
    });

    res.status(200).json({
      message: "‚úÖ Annonce updated successfully",
      annonce: updatedAnnonce,
    });
  } catch (error) {
    console.error("‚ùå Error updating annonce:", error);
    res.status(500).json({ message: "Server error", error: error.message });
  }
};
// update the statue
exports.updateStatutByAnnonceur = async (req, res) => {
  try {
    const { id } = req.params; // üÜî ÿ±ŸÇŸÖ ÿßŸÑÿ•ÿπŸÑÿßŸÜ
    const { statut, annonceurId } = req.body; // id ÿßŸÑŸÖÿπŸÑŸÜ ÿßŸÑŸÖÿ±ÿ≥ŸÑ

    // üîπ ÿßŸÑÿ™ÿ≠ŸÇŸÇ ÿ£ŸÜ ÿßŸÑŸÖÿπŸÑŸÜ ŸÖŸàÿ¨ŸàÿØ
    // const annonceur = await User.findById(annonceurId);
    // if (!annonceur) return res.status(404).json({ message: "Annonceur non trouv√©" });

    // if (annonceur.role !== "annonceur") {
    //   return res.status(403).json({ message: "üö´ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ŸÑŸäÿ≥ ŸÖÿπŸÑŸÜŸãÿß" });
    // }

    // üîπ ÿßŸÑÿ™ÿ≠ŸÇŸÇ ÿ£ŸÜ ÿßŸÑÿ≠ÿßŸÑÿ© ÿµÿ≠Ÿäÿ≠ÿ©
    const allowedStatus = ["En attente", "Approuv√©", "Rejet√©"];
    if (!allowedStatus.includes(statut)) {
      return res.status(400).json({ message: "Statut invalide" });
    }

    // üîπ ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑÿ•ÿπŸÑÿßŸÜ ŸÖÿπ ÿßŸÑÿ™ÿ£ŸÉÿØ ÿ£ŸÜŸá ÿ™ÿßÿ®ÿπ ŸÑŸáÿ∞ÿß ÿßŸÑŸÖÿπŸÑŸÜ
    const annonce = await Annonce.findOneAndUpdate(
      { _id: id, idannouncer: annonceurId },
      { statut },
      { new: true }
    );

    if (!annonce) {
      return res.status(404).json({ message: "Annonce introuvable ou pas autoris√©" });
    }

    res.status(200).json({
      message: "Statut de l'annonce mis √† jour avec succ√®s ‚úÖ",
      annonce
    });

  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// get annonce with the details of annonceur
exports.getAnnoncesOfAnnonceur = async (req, res) => {
  try {
    const { annonceurId } = req.params;

    const annonceur = await User.findById(annonceurId)
      .select("nom prenom email role image")
      .populate({
        path: "annonces",          // ÿßŸÑÿ≠ŸÇŸÑ array ŸÅŸä User
        select: "description statut image datePublication"
      });

    if (!annonceur) {
      return res.status(404).json({ message: "Annonceur non trouv√©" });
    }

    res.status(200).json({
      message: "‚úÖ Annonces r√©cup√©r√©es avec succ√®s",
      annonceur
    });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};










//get all annonces
exports.getAnnonces = async (req, res) => {
  try {
    const annonces = await Annonce.find();
    res.status(200).json(annonces);
  } catch (error) {
    res.status(500).json({ message: 'Erreur lors de la r√©cup√©ration des annonces', error });
  }
};