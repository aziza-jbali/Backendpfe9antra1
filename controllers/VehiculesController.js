
const  Vehicule = require("../models/VehiculesSchema");// first 7aja importation mta3 model
const userModel = require("../models/userSchema")
// Get all users , add user , search user,delete user , update user
// add v√©huciles by image and relited it with the agence

// exports.addVehicule = async (req, res) => {
//   try {
//     const agenceId = req.params.id; // ÿ£Ÿà req.user._id ŸÑŸà ÿπŸÜÿØŸÉ auth
//     const data = req.body;

//     // ÿ•ÿ∞ÿß ŸÜÿ±ŸÅÿπ ÿßŸÑÿµŸàÿ±ÿ© ÿπÿ®ÿ± multer
//     if (req.file) {
//       data.image = `/uploads/vehicules/${req.file.filename}`;
//     }

//     // ŸÜÿ±ÿ®ÿ∑ ÿßŸÑÿ≥Ÿäÿßÿ±ÿ© ÿ®ŸàŸÉÿßŸÑÿ© ŸÖÿπŸäŸÜÿ©
//     data.idagencedevehicule = agenceId;

//     // ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑÿ≥Ÿäÿßÿ±ÿ©
//     const newVehicule = new Vehicule(data);
//     await newVehicule.save();

//     // ŸÜÿ∂ŸäŸÅ ÿßŸÑŸÄ id ÿ™ÿßÿπ ÿßŸÑÿ≥Ÿäÿßÿ±ÿ© ÿ•ŸÑŸâ ÿ¨ÿØŸàŸÑ ÿßŸÑŸàŸÉÿßŸÑÿ©
//     await User.findByIdAndUpdate(
//       agenceId,
//       { $push: { vehicules: newVehicule._id } },
//       { new: true }
//     );

//     res.status(201).json({
//       message: 'üöó V√©hicule ajout√© avec succ√®s',
//       vehicule: newVehicule
//     });
//   } catch (error) {
//     res.status(500).json({ message: error.message });
//   }
// };





// exports.addVehicule = async (req, res) => {
//   try {
//     const agenceId = req.params.id;
//     const data = req.body;

//     if (req.file) {
//       data.image = `/uploads/vehicules/${req.file.filename}`;
//     }

//     data.idagencedevehicule = agenceId;

//     const newVehicule = new  Vehicule(data);
//     await newVehicule.save();

//     await userModel.findByIdAndUpdate(
//       agenceId,
//       { $push: { vehicules: newVehicule._id } },
//       { new: true }
//     );

//     res.status(201).json({
//       message: "üöó V√©hicule ajout√© avec succ√®s",
//       vehicule: newVehicule
//     });
//   } catch (error) {
//     res.status(500).json({ message: error.message });
//   }
// };











exports.addVehicule = async (req, res) => {
  try {
    const agenceId = req.params.id;
    const data = req.body;

    // ÿßŸÑÿ™ÿ£ŸÉÿØ ÿ£ŸÜ ÿßŸÑŸàŸÉÿßŸÑÿ© ŸÖŸàÿ¨ŸàÿØÿ©
    const agence = await userModel.findById(agenceId);
    if (!agence) {
      return res.status(404).json({ message: "Agence not found" });
    }

    // ÿßŸÑÿ™ÿ£ŸÉÿØ ÿ£ŸÜ ÿßŸÑÿØŸàÿ± ŸáŸà "agence"
    if (agence.role !== "agence") {
      return res.status(403).json({ message: "Seul les agences peuvent ajouter des v√©hicules" });
    }

    // ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑÿµŸàÿ±ÿ© ÿ•ÿ∞ÿß ŸÖŸàÿ¨ŸàÿØÿ©
    if (req.file) {
      data.image = `/uploads/vehicules/${req.file.filename}`;
    }

    data.idagencedevehicule = agenceId;

    // ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑÿ≥Ÿäÿßÿ±ÿ©
    const newVehicule = new Vehicule(data);
    await newVehicule.save();

    // ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑÿ≥Ÿäÿßÿ±ÿ© ŸÑŸÑŸàŸÉÿßŸÑÿ©
    agence.vehicules.push(newVehicule._id);
    await agence.save();

    res.status(201).json({
      message: "üöó V√©hicule ajout√© avec succ√®s",
      vehicule: newVehicule
    });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};



/// delete v√©hicules and also from the agence 
// DELETE VEHICULE
exports.deleteVehicule = async (req, res) => {
  try {
    const vehiculeId = req.params.id;

    // 1. ÿ≠ÿ∞ŸÅ ÿßŸÑŸÄ Vehicule ŸÖŸÜ collection ÿßŸÑÿ≥Ÿäÿßÿ±ÿßÿ™
    const deletedVehicule = await Vehicule.findByIdAndDelete(vehiculeId);
    if (!deletedVehicule) {
      return res.status(404).json({ message: "Vehicule not found" });
    }

    // 2. ÿ≠ÿ∞ŸÅ ÿßŸÑŸÄ Vehicule ŸÖŸÜ array ÿßŸÑŸàŸÉÿßŸÑÿ©
    await userModel.updateOne(
       { _id: deletedVehicule.idagencedevehicule }, // ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑÿ≠ŸÇŸÑ ÿßŸÑÿµÿ≠Ÿäÿ≠
  { $pull: { vehicules: vehiculeId } } 
    );

    res.status(200).json({ message: "Vehicule deleted successfully" });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "Server error", error: error.message });
  }
};

//update vehicules with image 
exports.updateVehicule = async (req, res) => {
  try {
    const vehiculeId = req.params.id; // id ÿßŸÑÿ≥Ÿäÿßÿ±ÿ©
    const data = req.body; // ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ¨ÿØŸäÿØÿ©

    // 1. ÿßŸÑÿ™ÿ≠ŸÇŸÇ ÿ£ŸÜ ÿßŸÑÿ≥Ÿäÿßÿ±ÿ© ŸÖŸàÿ¨ŸàÿØÿ©
    const vehicule = await Vehicule.findById(vehiculeId);
    if (!vehicule) {
      return res.status(404).json({ message: "üö´ V√©hicule not found" });
    }

    // 2. ÿßŸÑÿ™ÿ≠ŸÇŸÇ ÿ£ŸÜ ÿßŸÑŸàŸÉÿßŸÑÿ© ÿßŸÑŸÖÿ±ÿ™ÿ®ÿ∑ÿ© ŸÖŸàÿ¨ŸàÿØÿ©
    const agence = await userModel.findById(vehicule.idagencedevehicule);
    if (!agence) {
      return res.status(404).json({ message: "üö´ Agence not found" });
    }

    // 3. ÿßŸÑÿ™ÿ≠ŸÇŸÇ ÿ£ŸÜ ÿßŸÑÿØŸàÿ± ŸáŸà agence
    if (agence.role !== "agence") {
      return res.status(403).json({ message: "üö´ User is not an agence" });
    }

    // 4. ÿ•ÿ∞ÿß ÿ™ŸÖ ÿ±ŸÅÿπ ÿµŸàÿ±ÿ© ÿ¨ÿØŸäÿØÿ©ÿå ŸÜÿ≠ŸÅÿ∏ ÿßŸÑŸÖÿ≥ÿßÿ±
    if (req.file) {
      data.image = `/uploads/vehicules/${req.file.filename}`;
    }

    // 5. ÿ™ÿ≠ÿØŸäÿ´ ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ≥Ÿäÿßÿ±ÿ©
    const updatedVehicule = await Vehicule.findByIdAndUpdate(
      vehiculeId,
      data,
      { new: true } // ŸÑÿ•ÿ±ÿ¨ÿßÿπ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿ®ÿπÿØ ÿßŸÑÿ™ÿ≠ÿØŸäÿ´
    );

    res.status(200).json({
      message: "‚úÖ V√©hicule updated successfully",
      vehicule: updatedVehicule
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "Server error", error: error.message });
  }
};


// changer le statu par l admin
// ‚úÖ admin ŸÅŸÇÿ∑ ŸäŸÖŸÉŸÜŸá ÿ™ÿ≠ÿØŸäÿ´ statut (En attente / Approuv√© / Rejet√©)
exports.updateStatutByAdmin = async (req, res) => {
  try {
    const { id } = req.params; // id ÿßŸÑÿ≥Ÿäÿßÿ±ÿ©
    const { statut, adminId } = req.body; // id ÿßŸÑŸÖÿ¥ÿ±ŸÅ ÿßŸÑŸÖÿ±ÿ≥ŸÑ

    // üîπ ŸÜÿ™ÿ≠ŸÇŸÇ ÿ£ŸÜ ÿßŸÑŸÖÿ¥ÿ±ŸÅ ŸÖŸàÿ¨ŸàÿØ
    // const admin = await userModel.findById(adminId);
    // if (!admin) return res.status(404).json({ message: "Admin not found" });
    // if (admin.role !== "admin") {
    //   return res.status(403).json({ message: "Acc√®s refus√©. Pas autoris√©." });
    // }

    // üîπ ŸÜÿ™ÿ≠ŸÇŸÇ ÿ£ŸÜ ÿßŸÑÿ≠ÿßŸÑÿ© ÿµÿ≠Ÿäÿ≠ÿ© (ŸÖŸÜ enum)
    const allowedStatus = ["En attente", "Approuv√©", "Rejet√©"];
    if (!allowedStatus.includes(statut)) {
      return res.status(400).json({ message: "Statut invalide" });
    }

    // üîπ ŸÜÿ≠ÿØÿ´ ÿßŸÑÿ≥Ÿäÿßÿ±ÿ©
    const vehicule = await Vehicule.findByIdAndUpdate(
      id,
      { statut },
      { new: true }
    );

    if (!vehicule) {
      return res.status(404).json({ message: "V√©hicule introuvable" });
    }

    res.status(200).json({
      message: "Statut mis √† jour avec succ√®s ‚úÖ",
      vehicule
    });

  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};





// ‚úÖ ÿßŸÑŸàŸÉÿßŸÑÿ© ŸÅŸÇÿ∑ ŸäŸÖŸÉŸÜŸáÿß ÿ™ÿ≠ÿØŸäÿ´ statusVehicule (diponible / indisponible)
exports.updateStatusVehiculeByAgence = async (req, res) => {
  try {
    const { id } = req.params; // id ÿßŸÑÿ≥Ÿäÿßÿ±ÿ©
    const { statusVehicule, agenceId } = req.body; // ÿßŸÑÿ≠ÿßŸÑÿ© ÿßŸÑÿ¨ÿØŸäÿØÿ© Ÿà id ÿßŸÑŸàŸÉÿßŸÑÿ©

    // üîπ ÿ™ÿ≠ŸÇŸÇ ÿ£ŸÜ ÿßŸÑÿ≠ÿßŸÑÿ© ÿ∂ŸÖŸÜ ÿßŸÑŸÇŸäŸÖ ÿßŸÑŸÖÿ≥ŸÖŸàÿ≠ ÿ®Ÿáÿß
    const allowed = ["diponible", "indisponible"];
    if (!allowed.includes(statusVehicule)) {
      return res.status(400).json({ message: "Statut de disponibilit√© invalide" });
    }

    // üîπ ÿ™ÿ≠ŸÇŸÇ ÿ£ŸÜ ÿßŸÑŸàŸÉÿßŸÑÿ© ŸÖŸàÿ¨ŸàÿØÿ© (ŸäŸÖŸÉŸÜ ÿ™ŸÅÿπŸäŸÑ ŸÑÿßÿ≠ŸÇŸãÿß)
    // const agence = await userModel.findById(agenceId);
    // if (!agence) return res.status(404).json({ message: "Agence non trouv√©e" });
    // if (agence.role !== "agence") {
    //   return res.status(403).json({ message: "Acc√®s refus√©. Pas autoris√©." });
    // }

    // üîπ ÿ™ÿ≠ŸÇŸÇ ÿ£ŸÜ ÿßŸÑÿ≥Ÿäÿßÿ±ÿ© ŸÅÿπŸÑÿßŸã ÿ™ÿßÿ®ÿπÿ© ŸÑŸáÿ∞Ÿá ÿßŸÑŸàŸÉÿßŸÑÿ© (ŸäŸÖŸÉŸÜ ÿ™ŸÅÿπŸäŸÑ ŸÑÿßÿ≠ŸÇŸãÿß)
    // const vehicule = await Vehicule.findOneAndUpdate(
    //   { _id: id, idagencedevehicule: agenceId },
    //   { statusVehicule },
    //   { new: true }
    // );

    // üîπ ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑÿ≥Ÿäÿßÿ±ÿ© ŸÖÿ®ÿßÿ¥ÿ±ÿ© ÿ®ÿØŸàŸÜ ÿ™ÿ≠ŸÇŸÇ (ŸÑŸÑÿ™ÿ¨ÿ±ÿ®ÿ© ÿßŸÑÿ¢ŸÜ)
    const vehicule = await Vehicule.findByIdAndUpdate(
      id,
      { statusVehicule },
      { new: true }
    );

    if (!vehicule) {
      return res.status(404).json({ message: "V√©hicule introuvable" });
    }

    res.status(200).json({
      message: "‚úÖ Statut de disponibilit√© mis √† jour avec succ√®s",
      vehicule
    });

  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};






// ‚úÖ ÿ¨ŸÑÿ® ÿ≥Ÿäÿßÿ±ÿ© Ÿàÿßÿ≠ÿØÿ© ÿ≠ÿ≥ÿ® ID
exports.getVehiculeById = async (req, res) => {
  try {
    const { id } = req.params; // ŸÜÿ¨Ÿäÿ®Ÿà ÿßŸÑŸÄ ID ŸÖŸÜ ÿßŸÑÿ±ÿßÿ®ÿ∑
    const vehicule = await Vehicule.findById(id);

    if (!vehicule) {
      return res.status(404).json({ message: "V√©hicule non trouv√©" });
    }

    res.status(200).json(vehicule);
  } catch (error) {
    res.status(500).json({ message: "Erreur lors de la r√©cup√©ration du v√©hicule", error });
  }
};





//get all V√©hicules
exports.getVehicules = async (req, res) => {
  try {
    const vehicules = await  Vehicule.find();
    res.status(200).json(vehicules);
  } catch (error) {
    res.status(500).json({ message: 'Erreur lors de la r√©cup√©ration', error });
  }
};